#!/bin/bash
set -e

_main_jb() {

    if [[ ! -e bin/docker-test-jenkins-hook.sh ]]; then
        echo "bin/docker-test-jenkins-hook.sh must exist relative to working directory when invoking build"
        exit 1
    fi

    local mandatory_callbacks=(run_test_container)
    local missing=0
    local cb

    for cb in $mandatory_callbacks; do
        if [[ "function" != $(type -t $cb) ]]; then
          echo "Mandatory function undefined: $cb"
          missing=1
        fi
    done
    
    if [[ $missing != 0 ]]; then
      exit 1
    fi

    _assert_env_vars IMAGE_TAG

    trap '_test_teardown' EXIT

    _title "SETUP"
    _test_setup

    _title "TESTING: booting test containers"
    _run_tests
    test_exit_status=$?

    if _is_deployable_branch && [[ "$test_exit_status" == "0" ]]; then
      _title "Building and pushing image for $GIT_COMMIT as tests passed"
      _build_and_push
      after_push
    fi

    exit $test_exit_status
}

# BUILD STEPS

_test_setup() {
    test_setup
}

_run_tests() {
    set +e
    run_test_container
    local test_exit_status=$?
    set -e
    return $test_exit_status
}

_build_and_push() {
    if _has_test_dockerfile; then
        mv built/Dockerfile.original built/Dockerfile
        docker build --quiet --rm --tag $IMAGE_TAG-$GIT_COMMIT built
    fi
    docker tag $IMAGE_TAG-$GIT_COMMIT $DOCKER_REPO_URL/$IMAGE_TAG
    docker push $DOCKER_REPO_URL/$IMAGE_TAG
}

_test_teardown() {
    _title "TEARDOWN"
    test_teardown

    if docker images | grep ^$IMAGE_TAG-$GIT_COMMIT; then
      _sub_title "Removing test image"
      docker rmi $IMAGE_TAG-$GIT_COMMIT
    else
      _sub_title "Test image never built!"
    fi
}

# PUBLIC API

build_test_image() {
    _sub_title "Building test image"
    rm -rf built || mkdir -p built
    git checkout-index -a --prefix built/
    if _has_test_dockerfile; then
        mv built/Dockerfile built/Dockerfile.original
        mv built/test/Dockerfile built
    fi
    docker build --quiet --rm --tag $IMAGE_TAG-$GIT_COMMIT built
}

# DEFAULT CALLBACK DEFINITIONS

test_setup() {
  build_test_image 
}
test_teardown() {
  true
}
after_push() {
  true
}

# source the hooks after default implementations
source bin/docker-test-jenkins-hook.sh

# HELPERS

_has_test_dockerfile() {
    [[ "$TEST_DOCKERFILE" != "" ]]
}

_is_deployable_branch() {
    local branch
    for branch in $(echo "$DEPLOY_BRANCHES" | tr "," "\n"); do
        if [[ "$GIT_BRANCH" =~ /"$branch"$ ]]; then
            return 0
        fi
    done
    return 1
}

_title() {
    printf "\n\n$1\n"
}

_sub_title() {
    printf "\n$1\n"
}

_assert_env_vars() {
    local var
    for var in $@; do
        if [[ "${!var}" == "" ]]; then
            echo "$var must have a value"
            exit 1
        fi
    done
}

_main_jb

